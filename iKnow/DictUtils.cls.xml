<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="iKnow.DictUtils">
<TimeCreated>63599,38008.653316</TimeCreated>

<Method name="CreateAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do ..DeleteAll()

	Do ..Create("MEDDATASET","UMLS_CANCER", "Cancer terms from UMLS", "en", "select '',NRM from %UMLS_lex.LNORM where (NRM['cancer') or (NRM['carci') or (NRM['tumor')")
	Do ..Create("MEDDATASET","SNOMED_CT_SYNONYMS", "SY Designated synonym", "en","SELECT CUI,STR FROM %UMLS_meta.MRCONSO where (TTY='SY') and (LAT='ENG') and (SAB = 'SNOMEDCT_US')")
	Do ..Create("MEDDATASET","SNOMED_CT_ALIAS", "SYN Designated alias", "en","SELECT CUI,STR FROM %UMLS_meta.MRCONSO where (TTY='SYN') and (LAT='ENG') and (SAB = 'SNOMEDCT_US')")
	Do ..Create("MEDDATASET","SNOMED_CT_PREFNAME", "PT Designated preferred name", "en","SELECT CUI,STR FROM %UMLS_meta.MRCONSO where (TTY='PT') and (LAT='ENG') and (SAB = 'SNOMEDCT_US')")

	Do ..Match("MEDDATASET")
]]></Implementation>
</Method>

<Method name="DeleteAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Kill ^tempDict
	Do ..Delete("MEDDATASET", "")
]]></Implementation>
</Method>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>domainName,dictName,dictDesc,lang,sql</FormalSpec>
<Implementation><![CDATA[
	#Dim objSQLStat as %SQL.Statement = ##class(%SQL.Statement).%New()
	Set objDomain=##class(%iKnow.Domain).Open(domainName)
	If objDomain="" Quit
	Set domainId=objDomain.Id
	Set dictId=##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(domainId, dictName)
	Do ##class(%iKnow.Matching.DictionaryAPI).DropDictionary(domainId, dictId)
	Set dictId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary(domainId, dictName, dictDesc, lang)
	;Create a dictionary with terms
	set tSC = objSQLStat.%Prepare(sql)
	if tSC {
		set objResult = objSQLStat.%Execute()
		While objResult.%Next() {
			set snomedId=objResult.%GetData(1)
			set term=objResult.%GetData(2)
			Set uri=term
			Write !,"Create ",dictName," : domainid = ",domainId,", dictid = ",dictId, ", term = ",term,", lang = *",lang,"*"
			set dictItemId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(domainId, dictId, term, uri, lang, .tSC)

			If snomedId '="" {
				&sql(Insert Into Data.SnomedDictionary (DictionaryName, DictionaryItem, SnomedConceptId)
		     		Values (:dictName, :dictItemId, :snomedId))
			}
			
			If tSC'=1 Do $SYSTEM.Status.DisplayError(tSC)
			If term'="" Set ^tempDict(dictName,term)=$lb(code)
		}
	}
]]></Implementation>
</Method>

<Method name="CreateViaTemp">
<ClassMethod>1</ClassMethod>
<FormalSpec>domainName,dictName,dictDesc,lang,tempName</FormalSpec>
<Implementation><![CDATA[
	Set objDomain=##class(%iKnow.Domain).Open(domainName)
	If objDomain="" Quit
	Set domainId=objDomain.Id
	Set dictId=##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(domainId, dictName)
	Do ##class(%iKnow.Matching.DictionaryAPI).DropDictionary(domainId, dictId)
	Set dictId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary(domainId, dictName, dictDesc, lang)
	;Create a dictionary with terms
	if tSC {
		Set name=""
		For {
			;Write !,objResult.%GetData(1)
			set name=$Order(^tempDict(tempName,name),1,data) if name="" Quit
			Set uri=term
			set code=$list(data,1)
			Write !,"Create ",dictName," : domainid = ",domainId,", dictid = ",dictId, ", term = ",term,", lang = *",lang,"*"
			Do ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItemAndTerm(domainId, dictId, term, uri, lang, .tSC)
			If tSC'=1 Do $SYSTEM.Status.DisplayError(tSC)
		}
	}
]]></Implementation>
</Method>

<Method name="Delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>domainName,dictName</FormalSpec>
<Implementation><![CDATA[
	Set objDomain=##class(%iKnow.Domain).Open(domainName)
	If objDomain="" Quit
	Set domainId=objDomain.Id
	if (dictName="") {
		Do ##class(%iKnow.Matching.DictionaryAPI).DropAllDictionaryData(domainId)
	} else {
		Set dictId=##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(domainId, dictName)
		Do ##class(%iKnow.Matching.DictionaryAPI).DropDictionary(domainId, dictId)
	}
]]></Implementation>
</Method>

<Method name="Match">
<ClassMethod>1</ClassMethod>
<FormalSpec>domainName</FormalSpec>
<Implementation><![CDATA[
	Set objDomain=##class(%iKnow.Domain).Open(domainName)
	If objDomain="" Quit
	Set domainId=objDomain.Id
	Write !,"Matching ...",!
	Set sc = ##class(%iKnow.Matching.MatchingAPI).MatchSources(domainId,,)  ;dictList)
	do ##class(%iKnow.Matching.MatchingAPI).GetErrors(.result, domainId)
	zw result
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// not used, in case we have a list of non-medical terms...

]]></Content>
</UDLText>

<Method name="CreateBlackList">
<ClassMethod>1</ClassMethod>
<FormalSpec>domainName</FormalSpec>
<Implementation><![CDATA[
	If '$Data(domainName) Set domainName="MEDDATASET"
	Set objDomain=##class(%iKnow.Domain).Open(domainName)
	If objDomain="" Quit
	Set domainId=objDomain.Id
	Set blackId=##class(%iKnow.Utils.MaintenanceAPI).CreateBlackList(domainId, "NONMEDICAL")
	Set i="" For {
		Set i=$order(^||tempfr(i),1,data) If i="" Quit
		set term=$list(data,1)
		set desc=$list(data,2)
		;todo : add term in iKnow dictionary
		Do ##class(%iKnow.Utils.MaintenanceAPI).AddStringToBlackList(domainId, blackId, term)
	}
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set objFilter=##class(%iKnow.Filters.SimpleMetadataFilter).%New(1,"patientid","=","pat_1089002")
	do ##class(%iKnow.Matching.MatchingAPI).GetTopItems(.result,1,1,100,objFilter,$lb(4)) 
	/*
	="dictId, dictItemId, name, URI,         frequency, spread, score

	result(1)=$lb(4,6923,"transit",":4:transit",      4, 2, 3)  -->1 full + 1 partial 
	result(2)=$lb(4,6110,"hernie",":4:hernie",        3, 2, 1.166666666666666667)  -> 2 partial + 1 not found?
	result(3)=$lb(4,5319,"anamnèse",":4:anamnèse",    2, 1, 1)  -> 2 partial
	result(4)=$lb(4,5329,"anesthésie",":4:anesthésie",2, 1, 1)  -> 2 partial

	
	*/
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
list of entity occurrences & dictionary matches  for a patient :
select eo.EntOccId, eo.entity->EntityValue, dm.DictionaryTerm->String,MatchedConceptCount, Source->patientid FROM iKnowPat.EntityOccurrence eo, iKnowPat.DictionaryMatch dm where FOR SOME %ELEMENT(dm.EntOccIds) (%VALUE = eo.EntOccId) and eo.entTypeId = 0
and Source->Patientid = 'pat_1010002'
order by entityvalue
*/
]]></Content>
</UDLText>
</Class>
</Export>
