<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="iKnow.SetAnalysisPlugin.Related">
<Super>iKnow.SetAnalysisPlugin</Super>
<TimeCreated>63407,55788.581555</TimeCreated>

<Parameter name="PluginId">
<Description>
ID's 1-999 are reserved, custom plugins start with 1000</Description>
<Default>2</Default>
</Parameter>

<Parameter name="Order">
<Description>
Order in which they appear in dropdown lists</Description>
<Default>2</Default>
</Parameter>

<Parameter name="Name">
<Default>Related</Default>
</Parameter>

<Parameter name="ShortDescription">
<Default><![CDATA[This plugin will return all the iKnow Related concepts for a given concept or for a set of concepts.<br>Enter a concept OR an existing Set.]]></Default>
</Parameter>

<Parameter name="LongDescription">
</Parameter>

<Parameter name="InputLabel">
<Default>Concept</Default>
</Parameter>

<Parameter name="InputPlaceholder">
<Default>type an existing concept</Default>
</Parameter>

<Parameter name="SetLabel">
<Default>Set</Default>
</Parameter>

<Parameter name="InputSize">
<Default>50</Default>
</Parameter>

<Parameter name="iKnowDomain">
<Default>1</Default>
</Parameter>

<Parameter name="InputSet">
<Default>1</Default>
</Parameter>

<Parameter name="InputPattern">
<Default>1</Default>
</Parameter>

<Parameter name="Metafield">
<Default>1</Default>
</Parameter>

<Parameter name="TermType">
<Default>ENTITY</Default>
</Parameter>

<Parameter name="DisableManualSelection">
<Default>0</Default>
</Parameter>

<Parameter name="PageSize">
<Default>500</Default>
</Parameter>

<Method name="GetPlugin">
<ClassMethod>1</ClassMethod>
<FormalSpec>PluginId:%Integer,ProjectId:%String,Input:%String,InputPattern:%String,InputSet:%String,objFilter:%String,*resultPtr:%String,Blacklists:%String="",Batch:%Boolean=0,PageSize:%String="500"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim Page as %Integer
	Set DomainId=##class(iKnow.SetAnalysis.Projects).GetDomainId(ProjectId)
	Do ..GetPageSize(.Page, .PageSize, Batch, ..#PageSize)
 	Set sc=$$$OK
	If $Get(resultPtr)="" Set resultPtr=$i(^iKnow.SetAnalysisTemp)
 
 	If InputSet'="" {
		Kill result
		Do ..GetPublicProjectSet(InputSet, .ProjectId, .InputSet)  //replace if public set
		Set Input=""
		For  {
			Set Input=$Order(^iKnow.SetAnalysis(ProjectId, InputSet, "E", Input)) If Input="" Quit
			Kill resultInput
			Set sc = ..GetRelated(.resultInput, DomainId, Input, Page, PageSize, objFilter, Blacklists)
			Set iCount=""
			For  {
				Set iCount=$Order(resultInput(iCount)) If iCount="" Quit
				Set result($i(result))=resultInput(iCount)
			}
		}
	} else {
		Set sc = ..GetRelated(.result, DomainId, Input, Page, PageSize, objFilter, Blacklists)
	}

	Set resultEnt=$Get(^iKnow.SetAnalysisTemp(resultPtr),0)
	Set iCount="" For {
		Set iCount=$Order(result(iCount),1,data) If iCount="" Quit
		Set sort=" "_$J(99999999-$list(data,3),8)_$ZCVT($list(data,2),"U")
		Set ^iKnow.SetAnalysisTemp(resultPtr,"S",sort,$list(data,1))=$ListBuild($list(data,2)_" [ "_$list(data,3)_" ]")
		Set resultEnt=resultEnt+1
	}
	Set ^iKnow.SetAnalysisTemp(resultPtr,"S")=resultEnt
	Quit sc
]]></Implementation>
</Method>

<Method name="GetRelated">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&resultInput,DomainId,Input,Page,PageSize,objFilter,Blacklists]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If PageSize [ "#" {
		Set CutOff = +PageSize
		Set PageSize = 100
		Set iCount = 0, Stop = 0
		For Page=1:1 {
			Set sc = ##class(%iKnow.Queries.EntityAPI).GetRelated(.resultTemp, DomainId, Input, Page, PageSize, objFilter, , , , , ,Blacklists)
			If $Order(resultTemp(""))="" Quit
			Set iResult=""
			For {
				Set iResult=$Order(resultTemp(iResult),1,data) If iResult="" Quit
				If $List(data,3) < CutOff Set Stop = 1 Quit
				Set iCount=iCount+1
				Set resultInput(iCount)=data
			}
			If Stop Quit
		}
	}
	else {
		Set sc = ##class(%iKnow.Queries.EntityAPI).GetRelated(.resultInput, DomainId, Input, Page, PageSize, objFilter, , , , , ,Blacklists)
	}
	Return sc
]]></Implementation>
</Method>

<Method name="GetPluginValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId,resultPtr,Id</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set DomainId=##class(iKnow.SetAnalysis.Projects).GetDomainId(ProjectId)
	Quit ##class(%iKnow.Queries.EntityAPI).GetValue(DomainId, Id)
]]></Implementation>
</Method>

<Method name="GetPluginId">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId,resultPtr,Value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set DomainId=##class(iKnow.SetAnalysis.Projects).GetDomainId(ProjectId)
	Quit ##class(%iKnow.Queries.EntityAPI).GetId(DomainId, Value)
]]></Implementation>
</Method>

<Method name="SetPluginMembers">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%String,resultPtr:%String,SaveSet:%String,TermType:%String</FormalSpec>
<Implementation><![CDATA[
	Set DomainId=##class(iKnow.SetAnalysis.Projects).GetDomainId(ProjectId)
	&sql(Select iKnowMetafield, iKnowMetafieldMethod into :fieldName,:fieldMethod from iKnow_SetAnalysis.Projects Where Id =:ProjectId)
	If fieldName'="" {
		Set fieldId=##class(%iKnow.Queries.MetadataAPI).GetFieldId(DomainId, fieldName, .sc)
	} else {
		Set fieldId=""
	}

	Do ##class(iKnow.SetAnalysis).BuildFilterFromSet(ProjectId, SaveSet,.objFilter)
	Set Value="" For  {
		Set Value=$Order(^iKnow.SetAnalysis(ProjectId, SaveSet, "E", Value),1,id) If Value="" Quit
		Set entList=$lb(id)
		Set sc = ##class(%iKnow.Queries.SourceAPI).GetByEntityIds(.result, DomainId, entList, 0,,objFilter)
		Do ..StoreMetaValues(TermType,ProjectId,SaveSet,fieldId,fieldName,fieldMethod,entList,.result)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>
</Export>
