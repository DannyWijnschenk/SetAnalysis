<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="iKnow.SetAnalysisPlugin.FileCohort">
<Super>iKnow.SetAnalysisPlugin</Super>
<TimeCreated>63558,43256.029126</TimeCreated>

<Parameter name="PluginId">
<Description>
ID's 1-999 are reserved, custom plugins start with 1000</Description>
<Default>13</Default>
</Parameter>

<Parameter name="Order">
<Description>
Order in which they appear in dropdown lists</Description>
<Default>13</Default>
</Parameter>

<Parameter name="Name">
<Default>FileCohort</Default>
</Parameter>

<Parameter name="ShortDescription">
<Default>Upload a file with a cohort (patientids or other members). This enables you to import a list of Patients created in another application. The filepath should be accessible from the iKnow SERVER !</Default>
</Parameter>

<Parameter name="LongDescription">
</Parameter>

<Parameter name="InputLabel">
<Default>File</Default>
</Parameter>

<Parameter name="InputPlaceholder">
<Default>path to file and filename</Default>
</Parameter>

<Parameter name="SetLabel">
</Parameter>

<Parameter name="InputSize">
<Default>20</Default>
</Parameter>

<Parameter name="iKnowDomain">
<Default>0</Default>
</Parameter>

<Parameter name="InputSet">
<Default>0</Default>
</Parameter>

<Parameter name="InputPattern">
<Default>0</Default>
</Parameter>

<Parameter name="Metafield">
<Default>1</Default>
</Parameter>

<Parameter name="TermType">
<Default>STRING</Default>
</Parameter>

<Parameter name="DisableManualSelection">
<Default>1</Default>
</Parameter>

<Method name="GetPlugin">
<ClassMethod>1</ClassMethod>
<FormalSpec>PluginId:%Integer,ProjectId:%String,Input:%String,InputPattern:%String,InputSet:%String,objFilter:%String,*resultPtr:%String,Blacklists:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $Get(resultPtr)="" Set resultPtr=$i(^iKnow.SetAnalysisTemp)

	Set ^iKnow.SetAnalysisTemp(resultPtr)=Input
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPluginValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId,resultPtr,Id</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit Id
]]></Implementation>
</Method>

<Method name="GetPluginId">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId,resultPtr,Value</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit Value
]]></Implementation>
</Method>

<Method name="SetPluginMembers">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%String,resultPtr:%String,SaveSet:%String,TermType:%String</FormalSpec>
<Implementation><![CDATA[
	Set IO = $IO
	Set File=$Get(^iKnow.SetAnalysisTemp(resultPtr))
	If File="" Quit
	Try {
		Open File:"R":0 Else  Do ##class(iKnow.SetAnalysis).Log("Could not open file : "_File) Quit
		For  {
			Use File Read Line
			Use IO
			Set Member=Line  ;in future : possibly more fields available?
			If Member="" Continue
			;todo : save member
			Set ^iKnow.SetAnalysis(ProjectId,SaveSet,"P",Member)=""

		}
	} catch {
		Use IO
		Close File		
		If $ZE'["ENDOFFILE" {
			Set sc=$$$ERROR($$$GeneralError, $ZE)
			Do ##class(iKnow.SetAnalysis).Log("Error reading file "_File_" : "_$ZE)
		}
	}
	Quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>
</Export>
