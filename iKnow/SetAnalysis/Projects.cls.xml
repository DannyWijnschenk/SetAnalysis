<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="iKnow.SetAnalysis.Projects">
<Super>%Persistent</Super>
<TimeCreated>63103,55584.584404</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="iKnowDomain">
<Description>
iKnow domain Name</Description>
<Type>%String</Type>
</Property>

<Property name="iKnowMetafield">
<Type>%String</Type>
</Property>

<Property name="Resource">
<Type>%String</Type>
</Property>

<Property name="iKnowMetafieldMethod">
<Type>%String</Type>
</Property>

<Property name="iKnowBlacklists">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="iKnowBlacklistIds">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<Collection>list</Collection>
<SqlComputeCode>set {*}=##class(iKnow.SetAnalysis.Projects).CalculateBlacklistIds({iKnowDomain},{iKnowBlacklists})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT,%%UPDATE,iKnowBlacklists</SqlComputeOnChange>
</Property>

<Property name="SetRepositories">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="Created">
<Type>%Date</Type>
</Property>

<Property name="Modified">
<Type>%Date</Type>
</Property>

<Property name="IsPublic">
<Description>
sets in a public Projects are visible for all other projects</Description>
<Type>%Boolean</Type>
</Property>

<Method name="iKnowBlacklistIdsGet">
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set objIds=##class(%ListOfDataTypes).%New()
	If ..iKnowBlacklists.Count()=0 Quit objIds
	Set objDomain=##class(%iKnow.Domain).Open(..iKnowDomain)
	If objDomain="" Quit objIds
	Set DomainId=objDomain.Id
	For i=1:1:..iKnowBlacklists.Count() {
		Set BlacklistId=##class(%iKnow.Utils.MaintenanceAPI).GetBlackListId(DomainId,..iKnowBlacklists.GetAt(i))
		Do objIds.Insert(BlacklistId)
	}
	quit objIds
]]></Implementation>
</Method>

<Index name="idxName">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Index name="idxPublic">
<Properties>IsPublic,Name</Properties>
</Index>

<Method name="CalculateBlacklistIds">
<ClassMethod>1</ClassMethod>
<FormalSpec>Domain:%String,Blacklists:%List</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	If Blacklists="" Quit ""
	Set objDomain=##class(%iKnow.Domain).Open(Domain)
	If objDomain="" Quit ""
	Set DomainId=objDomain.Id
	Set BlacklistIds=""
	For iBlacklist=1:1:$ListLength(Blacklists) {
		Set BlacklistId=##class(%iKnow.Utils.MaintenanceAPI).GetBlackListId(DomainId,$List(Blacklists,iBlacklist))
		Set BlacklistIds=BlacklistIds_$ListBuild(BlacklistId)
	}
	Quit BlacklistIds
]]></Implementation>
</Method>

<Method name="Convert">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set DomainId=""
	For {
		Set DomainId=$Order(^iKnow.SetAnalysis(DomainId)) If DomainId="" Quit
		Set Metafield=^(DomainId)
		Set ProjectId=DomainId
		Set objDomain=##class(%iKnow.Domain).OpenId(DomainId)
		Set DomainName=objDomain.Name
		&sql(Select Name Into :ProjectName from iKnow_SetAnalysis.Projects Where ID=:DomainId)
		If SQLCODE=0 Write "Domain ",DomainId," already known as project '",ProjectName,"'",! Continue
		;need to use the global directly to set the Id
		Set ^iKnow.SetAnalysis.ProjectsD(ProjectId)=$Lb("","Project"_ProjectId,"Generated by conversion",DomainName,Metafield)
		If ProjectId>$Get(^iKnow.SetAnalysis.ProjectsD) Set ^iKnow.SetAnalysis.ProjectsD=ProjectId
	}
	Do ##class(iKnow.SetAnalysis.Projects).%BuildIndices()
]]></Implementation>
</Method>

<Method name="GetProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Projects:%String,projectId:%Integer=""]]></FormalSpec>
<Implementation><![CDATA[
	Set objSQL=##class(%SQL.Statement).%New()
	Set sc=objSQL.%Prepare("Select Id, Name, Description, iKnowDomain, iKnowMetafield, Created, Modified From iKnow_SetAnalysis.Projects"_$Select(projectId="":"",1:" Where ID = "_projectId))
	Set objStatement=objSQL.%Execute()
	Set Projects=0
	While objStatement.%Next() {
	  Set Projects($I(Projects))=$ListBuild(objStatement.%GetData(1),objStatement.%GetData(2),objStatement.%GetData(3),objStatement.%GetData(4),objStatement.%GetData(5),objStatement.%GetData(6),objStatement.%GetData(7))
	}
]]></Implementation>
</Method>

<Method name="GetDomainId">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&sql(Select iKnowDomain Into :iKnowDomain From iKnow_SetAnalysis.Projects Where Id = :ProjectId)
	If SQLCODE'=0 Quit 0
	If iKnowDomain="" Quit 0
	Set objDomain=##class(%iKnow.Domain).Open(iKnowDomain)
	If objDomain="" Quit 0
	Quit objDomain.Id
]]></Implementation>
</Method>

<Method name="GetiKnowDomainByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&sql(Select iKnowDomain Into :iKnowDomain From iKnow_SetAnalysis.Projects Where Name = :projectName)
	If SQLCODE'=0 Quit ""
	Quit iKnowDomain
]]></Implementation>
</Method>

<Method name="ProjectNameExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	&sql(Select Id From iKnow_SetAnalysis.Projects Where Name = :projectName)
	Quit (SQLCODE=0)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^iKnow.SetAnalysis.ProjectsD</DataLocation>
<DefaultData>ProjectsDefaultData</DefaultData>
<IdLocation>^iKnow.SetAnalysis.ProjectsD</IdLocation>
<IndexLocation>^iKnow.SetAnalysis.ProjectsI</IndexLocation>
<StreamLocation>^iKnow.SetAnalysis.ProjectsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ProjectsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>iKnowDomain</Value>
</Value>
<Value name="5">
<Value>iKnowMetafield</Value>
</Value>
<Value name="6">
<Value>Resource</Value>
</Value>
<Value name="7">
<Value>iKnowMetafieldMethod</Value>
</Value>
<Value name="8">
<Value>iKnowBlacklists</Value>
</Value>
<Value name="9">
<Value>SetRepositories</Value>
</Value>
<Value name="10">
<Value>Created</Value>
</Value>
<Value name="11">
<Value>Modified</Value>
</Value>
<Value name="12">
<Value>IsPublic</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
